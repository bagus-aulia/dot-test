package mocks

import (
	"context"

	"github.com/bagus-aulia/dot-test/app/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// GetUserList provides a mock function with given fields: ctx
func (_m *UserUsecase) GetUserList(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).([]models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUUID provides a mock function with given fields: ctx, uuid
func (_m *UserUsecase) GetUserByUUID(ctx context.Context, UUID string) (models.User, error) {
	ret := _m.Called(ctx, UUID)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, UUID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, UUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, name, address
func (_m *UserUsecase) CreateUser(ctx context.Context, name string, address string) (models.User, error) {
	ret := _m.Called(ctx, name, address)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.User); ok {
		r0 = rf(ctx, name, address)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, uuid, name, address
func (_m *UserUsecase) UpdateUser(ctx context.Context, UUID string, name string, address string) (models.User, error) {
	ret := _m.Called(ctx, UUID, name, address)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) models.User); ok {
		r0 = rf(ctx, UUID, name, address)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, UUID, name, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
